pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials-id'   // Jenkins credentials ID for DockerHub
        AWS_CREDENTIALS_ID       = 'aws-eks-credentials'         // Jenkins credentials ID for AWS (type: AWS Credentials)
        DOCKERHUB_USERNAME       = 'sumantharya'
        AWS_REGION               = 'ap-south-1'
        CLUSTER_NAME             = 'eks-cluster-sumanth'
    }

    tools {
        jdk 'JDK17' // Ensure JDK17 is installed via Jenkins global tools
    }

    stages {

        stage('Clone') {
            steps {
                git(
                    url: 'https://github.com/SumantharyaM/microservices-project.git',
                    branch: 'main',
                    credentialsId: 'github-creds'
                )
            }
        }

        stage('Build & Package') {
            steps {
                script {
                    def services = ['user-service', 'product-service', 'order-service']
                    for (svc in services) {
                        dir(svc) {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['user-service', 'product-service', 'order-service']
                    for (svc in services) {
                        dir(svc) {
                            sh "docker build -t ${DOCKERHUB_USERNAME}/${svc}:latest ."
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKERHUB_CREDENTIALS_ID}",
                    usernameVariable: 'DOCKERHUB_USER',
                    passwordVariable: 'DOCKERHUB_PASS'
                )]) {
                    script {
                        sh 'echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin'
                        def services = ['user-service', 'product-service', 'order-service']
                        for (svc in services) {
                            sh "docker push ${DOCKERHUB_USERNAME}/${svc}:latest"
                        }
                    }
                }
            }
        }

        stage('Trivy Vulnerability Scan') {
            steps {
                script {
                    def services = ['user-service', 'product-service', 'order-service']
                    for (svc in services) {
                        sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKERHUB_USERNAME}/${svc}:latest"
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]
                ]) {
                    script {
                        sh """
                            echo "üîÅ Updating kubeconfig..."
                            aws eks --region ${AWS_REGION} update-kubeconfig --name ${CLUSTER_NAME}

                            echo "üöÄ Deploying to Kubernetes..."
                            kubectl apply -f k8s-common/
                            kubectl apply -f user-service/k8s/
                            kubectl apply -f product-service/k8s/
                            kubectl apply -f order-service/k8s/
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout || true'
        }
        failure {
            // Remove this block if mail isn't configured in Jenkins
            mail to: 'sumantharya1@gmail.com',
                 subject: "‚ùå Jenkins Build Failed: ${env.JOB_NAME} [#${env.BUILD_NUMBER}]",
                 body: "Check Jenkins logs for failure details at ${env.BUILD_URL}"
        }
    }
}
