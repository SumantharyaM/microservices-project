pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials-id'
        AWS_CREDENTIALS_ID = 'aws-eks-credentials'
        DOCKERHUB_USERNAME = 'sumantharya'
        AWS_REGION = 'ap-south-1'
        CLUSTER_NAME = 'eks-cluster-sumanth'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sumantharya/user-service.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                        docker build -t $DOCKERHUB_USERNAME/user-service:latest .
                        docker push $DOCKERHUB_USERNAME/user-service:latest
                    '''
                }
            }
        }

        stage('Create EKS Cluster') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${AWS_REGION}") {
                    sh '''
                        eksctl create cluster \
                          --name $CLUSTER_NAME \
                          --region $AWS_REGION \
                          --nodegroup-name standard-workers \
                          --node-type t3.medium \
                          --nodes 2 \
                          --nodes-min 1 \
                          --nodes-max 3 \
                          --managed
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${AWS_REGION}") {
                    sh '''
                        aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
    }
}
